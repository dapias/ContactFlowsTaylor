include("./src/steeperandstepsize.jl")

function campoContacto{T<:Real}(x ::Array{T,1}, beta::Float64)
  #Esta función recibe un arreglo, lo convierte en uno tipo Taylor, resuelve las ecuaciones de movimiento y regresa los coeficientes de la solución.
  order = ordenTaylor
  dim = length(x) #Dimension of the phase space
  vec0T = [ Taylor1([x[i]], order) for i in 1:dim]
  n = iceil((dim - 1)/2)

  y = [ Taylor1(0., order) for i=1:dim ]
  D = [ Taylor1(0., order) for i=1:dim ]


  for k = 0:order-1
    knext = k+1

    for i in 1:dim
      y[i] = Taylor1( vec0T[i].coeffs[1:k+1], k)
    end

    #Acá entra el Hamiltoniano (parece que si lo obtengo numéricamente con ForwardDiff no funciona el método de Taylor)
    # porque necesito una expresión analítica que me permita hacer las iteraciones, esto parece ser un problema grave
    # para las aplicaciones numéricas del método de Taylor

    #Las entradas *D* y *y* estan en el orden q, p, S

    #Ecuaciones de movimiento

        #Viejas:
   # D[1] = (y[end]^2+1)*beta*y[2]*exp(beta*((1/4)*y[2]^2+(1/4)*y[1]^2))/(2*y[end])
   # D[2] = -exp(beta*((1/4)*y[2]^2+(1/4)*y[1]^2))*(beta*y[1]*y[end]^3-2*y[2]*y[3]^2+beta*y[1]*y[3]+2*y[2])/(2*y[end]^2)
   # D[end] = -(y[end]^2+1)*exp(beta*((1/4)*y[2]^2+(1/4)*y[1]^2))*(beta*y[2]^2-2)/(2*y[end])

        #Nuevas from Gibbs Perfect Temperature:
   #     D[1] = (1/2)*(exp(-y[3]^2)+y[3]^3)*y[2]*exp((1/4)*y[2]^2+(1/4)*y[1]^2)/(sqrt(y[3])+2*y[3])
   #     D[2] = -(1/2)*exp((1/4)*y[2]^2+(1/4)*y[1]^2)*(y[3]^4*y[1]+2*y[3]^(9/2)*y[1]+4*exp(-y[3]^2)*y[3]^2*y[2]+8*exp(-y[3]^2)*y[3]^(5/2)*y[2]-5*y[2]*y[3]^3-8*y[3]^(7/2)*y[2]+exp(-y[3]^2)*y[3]*y[1]+2*exp(-y[3]^2)*y[3]^(3/2)*y[1]+4*exp(-y[3]^2)*sqrt(y[3])*y[2]+exp(-y[3]^2)*y[2])/((sqrt(y[3])+2*y[3])^2*sqrt(y[3]))
   #     D[3] = -1/2*(exp(-y[3]^2)+y[3]^3)*exp(1/4*y[2]^2+1/4*y[1]^2)*(y[2]^2-2)/(y[3]^(1/2)+2*y[3])

        #Nuevas from Tsallis Perfect Temperature:
   #     D[1] = 1/2888816545234944*(exp(y[3]^(1/2))*y[3]+((y[3]^3+1)/y[3]^2)^(1/2))*(y[1]^2+y[2]^2+72)^8*y[2]/y[3]
   #     D[2] = -1/103997395628457984*(y[1]^2+y[2]^2+72)^8*(36*y[3]^(9/2)*exp(y[3]^(1/2))*((y[3]^3+1)/y[3]^2)^(1/2)*y[1]+y[3]^(7/2)*y[2]^3+y[3]^(7/2)*y[2]*y[1]^2-exp(y[3]^(1/2))*((y[3]^3+1)/y[3]^2)^(1/2)*y[2]^3*y[3]^4-exp(y[3]^(1/2))*((y[3]^3+1)/y[3]^2)^(1/2)*y[2]*y[1]^2*y[3]^4+72*y[3]^(7/2)*y[2]+36*y[3]^(9/2)*y[1]-72*exp(y[3]^(1/2))*((y[3]^3+1)/y[3]^2)^(1/2)*y[2]*y[3]^4+36*y[3]^(3/2)*y[1]+4*y[3]^(1/2)*y[2]^3+4*y[3]^(1/2)*y[2]*y[1]^2+288*y[3]^(1/2)*y[2])/y[3]^(9/2)/((y[3]^3+1)/y[3]^2)^(1/2)
   #     D[3] = -1/51998697814228992*(exp(y[3]^(1/2))*y[3]+((y[3]^3+1)/y[3]^2)^(1/2))*(y[1]^2+y[2]^2+72)^8*(-y[1]^2+17*y[2]^2-72)/y[3]

        #Nuevas from Generating the Logistic distribution:
   #     D[1] = 1/2*(exp(-3.1*y[3])*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+exp(y[3]^(1/2))+(y[3]^3)^(1/2))*y[2]*(-1+exp(1/2*y[2]^2+1/2*y[1]^2-2))/y[3]/(1+exp(1/2*y[2]^2+1/2*y[1]^2-2))/(exp(1/2*y[2]^2+1/2*y[1]^2-2)/(1+exp(1/2*y[2]^2+1/2*y[1]^2-2))^2)^(1/2)
   #     D[2] = (-.5000000000*exp(-3.100000000*y[3]+.5000000000*y[2]^2+.5000000000*y[1]^2-2.)*y[1]*y[3]^3*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+.5000000000*y[2]*exp(-3.100000000*y[3]+.5000000000*y[2]^2+.5000000000*y[1]^2-2.)*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-.5000000000*exp(1/2*y[2]^2+1/2*y[1]^2-2)*y[1]*y[3]^4*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+.5000000000*exp(-3.1*y[3])*y[1]*y[3]^3*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-.5000000000*exp(1/2*y[2]^2+1/2*y[1]^2-2)*y[1]*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+.5000000000*y[2]*exp(-3.1*y[3])*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-5.166666667*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)*exp(-3.1*y[3])+2.166666667*y[2]*exp(1/2*y[2]^2+1/2*y[1]^2-2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)-y[2]*exp(1/2*y[2]^2+1/2*y[1]^2-2+y[3]^(1/2))*y[3]^(1/2)*(y[3]^3)^(1/2)-1.166666667*y[2]*exp(1/2*y[2]^2+1/2*y[1]^2-2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]*(y[3]^3)^(1/2)+.5000000000*y[2]*exp(1/2*y[2]^2+1/2*y[1]^2-2+y[3]^(1/2))*(y[3]^3)^(1/2)*y[3]+.5000000000*y[1]*y[3]^4*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+.5000000000*y[1]*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+2.166666667*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)-y[2]*y[3]^(1/2)*(y[3]^3)^(1/2)*exp(y[3]^(1/2))-1.166666667*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]*(y[3]^3)^(1/2)+.5000000000*y[2]*exp(y[3]^(1/2))*(y[3]^3)^(1/2)*y[3]+.5000000000*y[3]^(3/2)*exp(y[3]^(1/2))*(y[3]^3)^(1/2)*y[1]+.5000000000*y[2]*exp(1/2*y[2]^2+1/2*y[1]^2-2)*y[3]^(7/2)+.5000000000*y[2]*y[3]^(7/2)+.5000000000*y[3]^(9/2)*y[1]-5.166666667*y[2]*exp(-3.100000000*y[3]+.5000000000*y[2]^2+.5000000000*y[1]^2-2.)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)-.5000000000*y[3]^(3/2)*exp(1/2*y[2]^2+1/2*y[1]^2-2+y[3]^(1/2))*(y[3]^3)^(1/2)*y[1]-.5000000000*y[3]^(9/2)*exp(1/2*y[2]^2+1/2*y[1]^2-2)*y[1])/(y[3]^3)^(1/2)/y[3]^(5/2)/(1.+exp(1/2*y[2]^2+1/2*y[1]^2-2))/(exp(1/2*y[2]^2+1/2*y[1]^2-2)/(1+exp(1/2*y[2]^2+1/2*y[1]^2-2))^2)^(1/2)
   #     D[3] = -1/2*(y[2]^2*exp(1/2*y[2]^2+1/2*y[1]^2-2)-y[2]^2-2*exp(1/2*y[2]^2+1/2*y[1]^2-2)-2)*(exp(-3.1*y[3])*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+exp(y[3]^(1/2))+(y[3]^3)^(1/2))/y[3]/(1+exp(1/2*y[2]^2+1/2*y[1]^2-2))/(exp(1/2*y[2]^2+1/2*y[1]^2-2)/(1+exp(1/2*y[2]^2+1/2*y[1]^2-2))^2)^(1/2)


        #Nuevas from Generating the Gaussian distribution:
   #     D[1] = (y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+exp(-3.1*y[3])*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+exp(y[3]^(1/2))+(y[3]^3)^(1/2))*(y[2]^2+y[1]^2-6.)*y[2]/y[3]/exp(-.5000000000*(y[2]^2+y[1]^2-6.)^2)^(1/2)
   #     D[2] = -(y[1]*y[3]^4*(y[3]^3)^(1/2)*y[2]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+1.000000000*y[1]*y[3]^2*(y[3]^3)^(1/2)*y[2]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[1]^3*y[3]^3*(y[3]^3)^(1/2)*exp(-3.1*y[3])*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-6.000000000*y[1]*y[3]^3*(y[3]^3)^(1/2)*exp(-3.1*y[3])*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-1/2*y[2]*exp(-3.1*y[3])*y[3]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*(y[3]^3)^(1/2)+y[1]^3*y[3]^(3/2)*(y[3]^3)^(1/2)*exp(y[3]^(1/2))-6.000000000*y[1]*y[3]^(3/2)*(y[3]^3)^(1/2)*exp(y[3]^(1/2))+1.000000000*y[1]*y[3]^(9/2)*y[2]^2-13/6*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)-1/2*y[2]*y[3]^(7/2)+y[1]^3*y[3]^4*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-6.000000000*y[1]*y[3]^4*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[1]^3*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-6.000000000*y[1]*y[3]^2*(y[3]^3)^(1/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[1]^3*y[3]^(9/2)-6.000000000*y[1]*y[3]^(9/2)+7/6*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]*(y[3]^3)^(1/2)-1/2*y[2]*exp(y[3]^(1/2))*(y[3]^3)^(1/2)*y[3]+y[2]*y[3]^(1/2)*(y[3]^3)^(1/2)*exp(y[3]^(1/2))+y[1]*y[3]^3*(y[3]^3)^(1/2)*exp(-3.1*y[3])*y[2]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+1.000000000*y[1]*y[3]^(3/2)*(y[3]^3)^(1/2)*exp(y[3]^(1/2))*y[2]^2+5.166666667*y[2]*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^3*(y[3]^3)^(1/2)*exp(-3.1*y[3]))/y[3]^(5/2)/(y[3]^3)^(1/2)/exp(-.5000000000*(y[2]^2+y[1]^2-6.)^2)^(1/2)
   #     D[3] = (exp(-3.1*y[3])*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+exp(y[3]^(1/2))+(y[3]^3)^(1/2)-exp(-3.1*y[3])*y[2]^4*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-exp(-3.1*y[3])*y[2]^2*y[1]^2*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-y[2]^4*y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-y[2]^2*y[1]^2*y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)+6.*exp(-3.1*y[3])*y[2]^2*y[3]^(3/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-y[2]^4*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)-y[2]^2*y[1]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+6.*y[2]^2*y[3]^(5/2)*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)-exp(y[3]^(1/2))*y[2]^4-exp(y[3]^(1/2))*y[2]^2*y[1]^2-(y[3]^3)^(1/2)*y[2]^4-(y[3]^3)^(1/2)*y[2]^2*y[1]^2+6.*y[2]^2*((exp(-3.1*y[3])*y[3]+y[3]^2+1.)/y[3])^(2/3)*y[3]^(1/2)+6.*exp(y[3]^(1/2))*y[2]^2+6.*(y[3]^3)^(1/2)*y[2]^2)/y[3]/exp(-.5000000000*(y[2]^2+y[1]^2-6.)^2)^(1/2)

#         #Gibbs from f(w) = cosh(w)*w^(-2/3):
#         D[1] = 1/2*(exp(y[3])+exp(-y[3]))*beta*y[2]*exp(1/4*beta*(y[1]^2+y[2]^2))/y[3]^(2/3)
#         D[2] = -1/6*exp(1/4*beta*(y[1]^2+y[2]^2))*(3*beta*y[1]*y[3]*exp(y[3])+3*beta*y[1]*y[3]*exp(-y[3])-6*exp(y[3])*y[3]*y[2]+6*exp(-y[3])*y[3]*y[2]+4*exp(y[3])*y[2]+4*exp(-y[3])*y[2])/y[3]^(5/3)
#         D[3] = -1/2*(exp(y[3])+exp(-y[3]))*exp(1/4*beta*(y[1]^2+y[2]^2))*(beta*y[2]^2-2)/y[3]^(2/3)

    #Gibbs from f(w) = exp(-w^2)
#     D[1] = 1/2*exp(1/2*beta*y[2]^2+1/2*beta*y[1]^2+y[3]^2)^(1/2)*beta*y[2]
#     D[2] = -1/2*(beta*y[1]-2*y[2]*y[3])*exp(1/2*beta*y[2]^2+1/2*beta*y[1]^2+y[3]^2)^(1/2)
#     D[3] = -1/2*(beta*y[2]^2-2)*exp(1/2*beta*y[2]^2+1/2*beta*y[1]^2+y[3]^2)^(1/2)

    #Gibbs from f(w) = w*exp(-w^2)
#    D[1] = 1/2*exp(1/4*beta*y[2]^2+1/4*beta*y[1]^2+1/2*y[3]^2)/(exp(y[3])+exp(-y[3]))^(1/2)/y[3]^(1/2)*beta*y[2]
#    D[2] = -1/2*(beta*y[1]*y[3]*exp(y[3])-2*exp(y[3])*y[2]*y[3]^2+beta*y[1]*y[3]*exp(-y[3])-2*exp(-y[3])*y[2]*y[3]^2+exp(y[3])*y[2]*y[3]-exp(-y[3])*y[2]*y[3]+exp(y[3])*y[2]+exp(-y[3])*y[2])/(exp(y[3])+exp(-y[3]))^(3/2)/y[3]^(3/2)*exp(1/4*beta*y[2]^2+1/4*beta*y[1]^2+1/2*y[3]^2)
#    D[3] = -1/2*(beta*y[2]^2-2)*exp(1/4*beta*y[2]^2+1/4*beta*y[1]^2+1/2*y[3]^2)/(exp(y[3])+exp(-y[3]))^(1/2)/y[3]^(1/2)

    #Campo de Fukuda

    D[1] = 6*y[2]/(4*y[1]^2+y[2]^2+4)
   D[2] =-8*(200*y[1]^2*y[2]*y[3]^3+50*y[2]^3*y[3]^3+200*y[2]*y[3]^3+3*y[1])/(4*y[1]^2+y[2]^2+4)
    D[3] = (-4*y[1]^2+5*y[2]^2-4)/(4*y[1]^2+y[2]^2+4)

    #Actualización de los coeficientes
    for i in 1:dim
      vec0T[i].coeffs[knext+1]  = D[i].coeffs[knext] / knext
    end

  end
  return vec0T
end

function contactIntegration(campo, nsteps, condinicial, timestep, beta=1.)
  t = 0.0

  x = condinicial

  n = length( x )

  q = Array(Float64, nsteps)
  p = Array(Float64, nsteps)
  S = Array(Float64, nsteps)
  tiempo = Array(Float64, nsteps)

  q[1] = x[1]
  p[1] = x[2]
  S[1] = x[3]
  tiempo = [timestep*(i-1) for i in 1:nsteps]

  temporarytime = 0.

  for i in 2:nsteps

    j = true
    while j

      t, vec1T = taylorStepper(campo, x, ordenTaylor, epsAbs, beta )

      for k=1:n
          x[k] = evaluate( vec1T[k], t )
      end

      temporarytime += t
      #println("time = $temporarytime")

      if tiempo[i] < temporarytime

      for k=1:n
          x[k] = evaluate( vec1T[k], tiempo[i] - (temporarytime - t))
      end
        temporarytime = tiempo[i]

        q[i] = x[1]
        p[i] = x[2]
        S[i] = x[3]
        j = false

      end
    end
  end

  tiempo, q, p, S


end

#condinicial
#x = [0.0, 1.0,0.001]

#Hay que checar que una vez corre la simulacion la condicion inicial cambia.

#x = contactIntegration(campoContacto, 100, x) ###Después se grafica
