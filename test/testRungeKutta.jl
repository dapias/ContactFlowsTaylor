#Test of the Taylor integrator for the contact Hamiltonian h = p + q + S

include("../src/ContactIntegrator.jl")

using ContactIntegrator
using ODE
import YAML
using FactCheck

function field{T<:Real}(t::T, vec0::Array{T,1})  #The t is passed as parameter to use the function ode45 of the module
  y = vec0
  len = length(y)
  D = zeros(len)
  #Equations of motion generated by h = (exp(-beta H)/Z f(S))^(-1/2) with H = 1/2p^2 + 2q^2, Z = pi/beta and f(S) = exp(S-c)/(1 + exp(S-c))^2
  #The order in the array D (and y) is D[1] = q, D[2] = p, D[3] = S

  #Field for the contact Hamiltonian h = p + q + w

  D[1] = 1.+0.*y[1]
  D[2] = -1. + y[2]
  D[3] = y[1] + y[3]

  return D
end

parameters = YAML.load(open("testparameters.yaml"))

n = parameters["nsampling"]
deltat = parameters["deltatsample"]

tarray = collect(0.: deltat:(n-1)*deltat)

initcond = Array{Float64}(3)
initcond = parameters["initcond"]
initcond = [initcond["q0"], initcond["p0"], initcond["S0"]]

relativetol = 1.0e-10

t, results = ode45(field, initcond, tarray; points=:specified, reltol=relativetol, abstol=1.0e-14)

q = Float64[results[i][1] for i in 1:length(t)]
p = Float64[results[i][2] for i in 1:length(t)]
S = Float64[results[i][3] for i in 1:length(t)]


initcond = parameters["initcond"]
initcond = [initcond["q0"], initcond["p0"], initcond["S0"]]
qarray = tarray + initcond[1]
parray = 1. + exp(tarray)*(initcond[2] - 1.)
sarray = -initcond[1] - 1. - tarray + (initcond[3] + initcond[1] + 1.0)*exp(tarray)

##These facts confirm that the local error stays in the order of the relative tolerance
facts("Error (tolerance) Tests") do
  @fact (abs(sarray[end]) - abs(S[end]))/abs(sarray[end]) <= relativetol*10. --> true
  @fact (abs(parray[end]) - abs(p[end]))/abs(parray[end]) <= relativetol*10. --> true
  @fact (abs(qarray[end]) - abs(q[end]))/abs(qarray[end]) <= relativetol*10. --> true
end